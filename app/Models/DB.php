<?php

namespace App\Models;

/**
 * @method static \CodeIgniter\Database\BaseBuilder testMode(bool $mode = true)
 * @method static \CodeIgniter\Database\BaseBuilder getBinds()
 * @method static \CodeIgniter\Database\BaseBuilder ignore(bool $ignore = true)
 * @method static \CodeIgniter\Database\BaseBuilder select($select = '*', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder selectMax(string $select = '', string $alias = '')
 * @method static \CodeIgniter\Database\BaseBuilder selectMin(string $select = '', string $alias = '')
 * @method static \CodeIgniter\Database\BaseBuilder selectAvg(string $select = '', string $alias = '')
 * @method static \CodeIgniter\Database\BaseBuilder selectSum(string $select = '', string $alias = '')
 * @method static \CodeIgniter\Database\BaseBuilder selectCount(string $select = '', string $alias = '')
 * @method static \CodeIgniter\Database\BaseBuilder maxMinAvgSum(string $select = '', string $alias = '', string $type = 'MAX')
 * @method static \CodeIgniter\Database\BaseBuilder distinct(bool $val = true)
 * @method static \CodeIgniter\Database\BaseBuilder from($from, bool $overwrite = false)
 * @method static \CodeIgniter\Database\BaseBuilder join(string $table, string $cond, string $type = '', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder where($key, $value = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orWhere($key, $value = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder whereHaving(string $qb_key, $key, $value = null, string $type = 'AND ', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder whereIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orWhereIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder whereNotIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orWhereNotIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder havingIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orHavingIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder havingNotIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orHavingNotIn(string $key = null, $values = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder like($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder notLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder orLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder orNotLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder havingLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder notHavingLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder orHavingLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder orNotHavingLike($field, string $match = '', string $side = 'both', bool $escape = null, bool $insensitiveSearch = false)
 * @method static \CodeIgniter\Database\BaseBuilder groupStart()
 * @method static \CodeIgniter\Database\BaseBuilder orGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder notGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder orNotGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder groupEnd()
 * @method static \CodeIgniter\Database\BaseBuilder havingGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder orHavingGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder notHavingGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder orNotHavingGroupStart()
 * @method static \CodeIgniter\Database\BaseBuilder havingGroupEnd()
 * @method static \CodeIgniter\Database\BaseBuilder groupBy($by, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder having($key, $value = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orHaving($key, $value = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder orderBy(string $orderBy, string $direction = '', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder limit(int $value = null, ?int $offset = 0)
 * @method static \CodeIgniter\Database\BaseBuilder offset(int $offset)
 * @method static \CodeIgniter\Database\BaseBuilder set($key, ?string $value = '', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder getSetData(bool $clean = false)
 * @method static \CodeIgniter\Database\BaseBuilder getCompiledSelect(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder get(int $limit = null, int $offset = 0, bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder countAll(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder countAllResults(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder getCompiledQBWhere()
 * @method static \CodeIgniter\Database\BaseBuilder getWhere($where = null, int $limit = null, ?int $offset = 0, bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder insertBatch(array $set = null, bool $escape = null, int $batchSize = 100)
 * @method static \CodeIgniter\Database\BaseBuilder setInsertBatch($key, string $value = '', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder getCompiledInsert(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder insert(array $set = null, bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder replace(array $set = null)
 * @method static \CodeIgniter\Database\BaseBuilder getCompiledUpdate(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder update(array $set = null, $where = null, int $limit = null)
 * @method static \CodeIgniter\Database\BaseBuilder updateBatch(array $set = null, string $index = null, int $batchSize = 100)
 * @method static \CodeIgniter\Database\BaseBuilder setUpdateBatch($key, string $index = '', bool $escape = null)
 * @method static \CodeIgniter\Database\BaseBuilder emptyTable()
 * @method static \CodeIgniter\Database\BaseBuilder truncate()
 * @method static \CodeIgniter\Database\BaseBuilder getCompiledDelete(bool $reset = true)
 * @method static \CodeIgniter\Database\BaseBuilder delete($where = '', int $limit = null, bool $reset_data = true)
 * @method static \CodeIgniter\Database\BaseBuilder increment(string $column, int $value = 1)
 * @method static \CodeIgniter\Database\BaseBuilder decrement(string $column, int $value = 1)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder query(string $sql, $binds = null, bool $setEscapeFlags = true, string $queryClass = 'CodeIgniter\\Database\\Query')
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder simpleQuery(string $sql)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transOff()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transStrict(bool $mode = true)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transStart(bool $test_mode = false)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transComplete()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transStatus()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transBegin(bool $test_mode = false)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transCommit()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder transRollback()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder prepare(\Closure $func, array $options = [])
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getLastQuery()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder showLastQuery()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getConnectStart()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getConnectDuration(int $decimals = 6)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder protectIdentifiers($item, bool $prefixSingle = false, bool $protectIdentifiers = null, bool $fieldExists = true)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder escapeIdentifiers($item)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder prefixTable(string $table = '')
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder affectedRows()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder escape($str)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder escapeString($str, bool $like = false)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder escapeLikeString($str)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder callFunction(string $functionName, ...$params): bool
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder listTables(bool $constrainByPrefix = false)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder tableExists(string $tableName)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getFieldNames(string $table)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder fieldExists(string $fieldName, string $tableName)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getFieldData(string $table)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getIndexData(string $table)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder getForeignKeyData(string $table)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder disableForeignKeyChecks()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder enableForeignKeyChecks()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder pretend(bool $pretend = true)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder resetDataCache()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder error()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder insertID()
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder __get(string $key)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder __isset(string $key)
 * @method static \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder table(string $tableName)
 *
 * @see \CodeIgniter\Database\BaseConnection
 * @see \CodeIgniter\Database\BaseBuilder
 */
class DB
{
    /**
     * Call static base connection.
     *
     * @param $method
     * @param $argument
     *
     * @return \CodeIgniter\Database\BaseConnection|\CodeIgniter\Database\BaseBuilder
     */
    public static function __callStatic($method, $arguments)
    {
        return \Config\Database::connect()->$method(...$arguments);
    }
}
